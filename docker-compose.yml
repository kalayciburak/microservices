version: '3.8'

services:
  zookeeper:
    container_name: zookeeper
    image: bitnami/zookeeper
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    container_name: kafka
    image: bitnami/kafka
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    depends_on:
      - zookeeper

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - redis:/data

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitor-net

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - grafana-config:/etc/grafana
    networks:
      - monitor-net

  #  keycloakpostgres:
  #    image: postgres
  #    container_name: postgres-keycloak
  #    volumes:
  #      - postgres_data:/var/lib/postgresql/data
  #    environment:
  #      POSTGRES_DB: keycloak
  #      POSTGRES_USER: postgres
  #      POSTGRES_PASSWORD: torukobyte123
  #    ports:
  #      - "5438:5432"

  keycloak:
    image: quay.io/keycloak/keycloak:legacy
    container_name: keycloak
    environment:
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      KEYCLOAK_IMPORT: /opt/jboss/keycloak/imports/realm-export.json
    ports:
      - "8080:8080"
    volumes:
      - .:/opt/jboss/keycloak/imports

  configserver:
    build: ./config-server
    container_name: config-server
    image: torukobyte/rent-a-car-microservice:config-server-image
    ports:
      - "8888:8888"
    volumes:
      - ./config-server:/app
    environment:
      - SPRING_CLOUD_CONFIG_SERVER_GIT_URI=https://github.com/kalayciburak/microservice-config-server

  discoveryserver:
    build: ./discovery-server
    container_name: discovery-server
    image: torukobyte/rent-a-car-microservice:discovery-server-image
    ports:
      - "9000:9000"
    volumes:
      - ./discovery-server:/app
    depends_on:
      - configserver
      - zipkin

  apigateway:
    build: ./api-gateway
    container_name: api-gateway
    image: torukobyte/rent-a-car-microservice:api-gateway-image
    ports:
      - "9010:9010"
    volumes:
      - ./api-gateway:/app
    depends_on:
      - configserver
      - discoveryserver
      - keycloak
      - zipkin
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  inventoryservice:
    build: ./inventory-service
    container_name: inventory-service
    image: torukobyte/rent-a-car-microservice:inventory-service-image
    volumes:
      - ./inventory-service:/app
    depends_on:
      - configserver
      - discoveryserver
      - inventorydb
      - kafka
      - zipkin
    environment:
      - SPRING_CLOUD_CONFIG_IMPORT=configserver:http://configserver:8888
      - SPRING_DATASOURCE_URL=jdbc:postgresql://inventorydb:5432/inventorydb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=torukobyte123

  filterservice:
    build: ./filter-service
    container_name: filter-service
    image: torukobyte/rent-a-car-microservice:filter-service-image
    volumes:
      - ./filter-service:/app
    depends_on:
      - configserver
      - discoveryserver
      - filterdb
      - kafka
      - redis
      - zipkin
    environment:
      - SPRING_CLOUD_CONFIG_IMPORT=configserver:http://configserver:8888
      - SPRING_DATA_MONGODB_URI=mongodb://filterdb:27017/filterdb
  #      - hostname=redis

  invoiceservice:
    build: ./invoice-service
    container_name: invoice-service
    image: torukobyte/rent-a-car-microservice:invoice-service
    volumes:
      - ./invoice-service:/app
    depends_on:
      - configserver
      - discoveryserver
      - invoicedb
      - kafka
      - zipkin
    environment:
      - SPRING_CLOUD_CONFIG_IMPORT=configserver:http://configserver:8888
      - SPRING_DATASOURCE_URL=jdbc:postgresql://invoicedb:5432/invoicedb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=torukobyte123

  paymentservice:
    build: ./payment-service
    container_name: payment-service
    image: torukobyte/rent-a-car-microservice:payment-service
    volumes:
      - ./payment-service:/app
    depends_on:
      - configserver
      - discoveryserver
      - paymentdb
      - kafka
      - zipkin
    environment:
      - SPRING_CLOUD_CONFIG_IMPORT=configserver:http://configserver:8888
      - SPRING_DATASOURCE_URL=jdbc:postgresql://paymentdb:5432/paymentdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=torukobyte123

  rentalservice:
    build: ./rental-service
    container_name: rental-service
    image: torukobyte/rent-a-car-microservice:rental-service
    volumes:
      - ./rental-service:/app
    depends_on:
      - configserver
      - discoveryserver
      - rentaldb
      - kafka
      - zipkin
    environment:
      - SPRING_CLOUD_CONFIG_IMPORT=configserver:http://configserver:8888
      - SPRING_DATASOURCE_URL=jdbc:postgresql://rentaldb:5432/rentaldb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=torukobyte123

  inventorydb:
    image: postgres
    container_name: inventory-db
    volumes:
      - postgres-inventory-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: inventorydb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: torukobyte123
    ports:
      - "5434:5432"

  invoicedb:
    image: postgres
    container_name: invoice-db
    volumes:
      - postgres-invoice-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: invoicedb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: torukobyte123
    ports:
      - "5435:5432"

  paymentdb:
    image: postgres
    container_name: payment-db
    volumes:
      - postgres-payment-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: paymentdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: torukobyte123
    ports:
      - "5436:5432"

  rentaldb:
    image: postgres
    container_name: rental-db
    volumes:
      - postgres-rental-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: rentaldb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: torukobyte123
    ports:
      - "5437:5432"

  filterdb:
    container_name: filter-db
    image: mongo
    ports:
      - "27017:27017"
    volumes:
      - "/data/db/"

#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
#    container_name: elasticsearch
#    environment:
#      - node.name=es-node
#      - cluster.name=es-cluster
#      - discovery.type=single-node
#    ports:
#      - "9200:9200"
#      - "9300:9300"
#    volumes:
#      - local-es:/usr/share/elasticsearch/data
#    networks:
#      - es-net

volumes:
  postgres-inventory-data:
    name: postgres-inventory-data
  postgres-invoice-data:
    name: postgres-invoice-data
  postgres-payment-data:
    name: postgres-payment-data
  postgres-rental-data:
    name: postgres-rental-data
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  redis:
    driver: local
  #  postgres_data:
  #    driver: local
  local-es:
    driver: local
  grafana-data:
    driver: local
  grafana-config:
    driver: local

networks:
  es-net:
    driver: bridge
  monitor-net:
    driver: bridge
